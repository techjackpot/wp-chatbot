{"version":3,"file":"js/app.js","mappings":"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","sources":["webpack://vue-ui/./src/components/ChatBot.vue","webpack://vue-ui/src/components/ChatBot.vue","webpack://vue-ui/./src/components/ChatBot.vue?74c1","webpack://vue-ui/./src/components/ChatBot.vue?7d5f","webpack://vue-ui/./src/main.js","webpack://vue-ui/webpack/bootstrap","webpack://vue-ui/webpack/runtime/chunk loaded","webpack://vue-ui/webpack/runtime/compat get default export","webpack://vue-ui/webpack/runtime/define property getters","webpack://vue-ui/webpack/runtime/global","webpack://vue-ui/webpack/runtime/hasOwnProperty shorthand","webpack://vue-ui/webpack/runtime/make namespace object","webpack://vue-ui/webpack/runtime/jsonp chunk loading","webpack://vue-ui/webpack/startup"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"chat-bot-wrapper\"},[_c('beautiful-chat',{attrs:{\"participants\":_vm.participants,\"onMessageWasSent\":_vm.onMessageWasSent,\"messageList\":_vm.messageList,\"newMessagesCount\":_vm.newMessagesCount,\"isOpen\":_vm.isChatOpen,\"close\":_vm.closeChat,\"open\":_vm.openChat,\"showTypingIndicator\":_vm.showTypingIndicator,\"colors\":_vm.colors,\"messageStyling\":false,\"title\":\"SixAxis Support\",\"alwaysScrollToBottom\":\"\",\"disableUserListToggle\":\"\"},scopedSlots:_vm._u([{key:\"user-avatar\",fn:function({}){return [_c('div')]}},{key:\"text-message-body\",fn:function({ message }){return [_vm._v(\" \"+_vm._s(_vm._f(\"conversion\")(message.data.text,_vm.status, message))+\" \")]}}])})],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"chat-bot-wrapper\">\n    <beautiful-chat\n      :participants=\"participants\"\n      :onMessageWasSent=\"onMessageWasSent\"\n      :messageList=\"messageList\"\n      :newMessagesCount=\"newMessagesCount\"\n      :isOpen=\"isChatOpen\"\n      :close=\"closeChat\"\n      :open=\"openChat\"\n      :showTypingIndicator=\"showTypingIndicator\"\n      :colors=\"colors\"\n      :messageStyling=\"false\"\n      title=\"SixAxis Support\"\n      alwaysScrollToBottom\n      disableUserListToggle\n    >\n      <template v-slot:user-avatar=\"{}\">\n        <div></div>\n      </template>\n      <template v-slot:text-message-body=\"{ message }\">\n        {{message.data.text | conversion(status, message)}}\n      </template>\n    </beautiful-chat>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      status: {},\n      log: {\n        ip: '',\n        sent: false,\n        enter_at: new Date(),\n        exit_at: new Date(),\n      },\n      prefillTimerID: null,\n      prefills: [\n        {\n          id: 'name',\n          type: 'name',\n          filled: false,\n          label: `What is your name?`,\n        },\n        {\n          id: 'email',\n          type: 'email',\n          filled: false,\n          label: `What is your email? (We don't spam... I promise)`,\n        },\n        {\n          id: 'zip',\n          type: 'zip',\n          filled: false,\n          label: `What is your zip/postal code?`,\n        },\n      ],\n      everTouched: false,\n      toLead: false,\n      touchWords: [\n        'quote',\n      ],\n      positiveWords: [\n        'yeah',\n        'yes',\n        'yep',\n      ],\n      negativeWords: [\n        'no',\n        'nah',\n        'none',\n        'nope',\n      ],\n      promptTimeout: 300,\n      participants: [\n        {\n          id: 'bot',\n          name: 'Support',\n        },\n      ], // the list of all the participant of the conversation. `name` is the user name, `id` is used to establish the author of a message, `imageUrl` is supposed to be the user avatar.\n      messageList: [\n        { type: 'text', author: 'bot', data: { text: `Hello, thank you for visiting. How may I help you?` }, },\n      ], // the list of the messages to show, can be paginated and adjusted dynamically\n      newMessagesCount: 1,\n      isChatOpen: false, // to determine whether the chat window should be open or closed\n      showTypingIndicator: '', // when set to a value matching the participant.id it shows the typing indicator for the specific user\n      colors: {\n        header: {\n          bg: '#D32F2F',\n          text: '#fff'\n        },\n        launcher: {\n          bg: '#D32F2F'\n        },\n        messageList: {\n          bg: '#fff'\n        },\n        sentMessage: {\n          bg: '#F44336',\n          text: '#fff'\n        },\n        receivedMessage: {\n          bg: '#eaeaea',\n          text: '#222222'\n        },\n        userInput: {\n          bg: '#fff',\n          text: '#212121'\n        },\n        userList: {\n          bg: '#fff',\n          text: '#212121'\n        },\n      }, // specifies the color scheme for the component\n    }\n  },\n  methods: {\n    checkPrefills() {\n      const prefill = this.prefills.find(prefill => !prefill.filled);\n      if (prefill) {\n        this.newMessagesCount = this.isChatOpen ? this.newMessagesCount : this.newMessagesCount + 1\n        this.addNewMessage({ author: 'bot', type: 'text', data: { text: prefill.label }, prefill_id: prefill.id, }, false);\n      } else {\n        this.addNewMessage({\n          type: 'text',\n          author: 'bot',\n          data: {\n            text: `Additional questions?`,\n          },\n          suggestions: [\n            'Yes',\n            'No',\n          ],\n          options: {\n            generic_followup: true,\n          },\n        }, false);\n      }\n    },\n    handlePreFills(check_prefill = false) {\n      if (this.prefillTimerID) {\n        clearTimeout(this.prefillTimerID);\n      }\n      if (!check_prefill) {\n        return\n      }\n      this.prefillTimerID = setTimeout(() => {\n        this.checkPrefills();\n      }, this.promptTimeout * 1000)\n    },\n    receiveMessage (text, question) {\n      if (text.length > 0) {\n        this.newMessagesCount = this.isChatOpen ? this.newMessagesCount : this.newMessagesCount + 1\n        this.addNewMessage({ author: 'bot', type: 'text', data: { text }, need_conversion: true, }, true)\n\n        if (text.startsWith(`Sorry, I don't know that as yet.`)) {\n          // this.checkPrefills();\n        }\n        if (question.data.text.toLowerCase().includes('quote')) {\n          this.checkPrefills();\n        }\n      }\n    },\n    requireReply (message) {\n      this.showTypingIndicator = '...'\n      this.$http.post('chatbot/ask', {\n        question: message.data.text,\n        type: 'embed',\n      })\n      .then(response => response.data.data)\n      .then((data) => {\n        const {answer} = data\n        this.receiveMessage(answer, message)\n      })\n      .catch(e => {\n        console.log(e);\n      })\n      .finally(() => {\n        this.showTypingIndicator = ''\n      })\n    },\n    addNewMessage (message, check_prefill = false) {\n      this.messageList = [ ...this.messageList, message ]\n      this.handlePreFills(check_prefill);\n    },\n    getLasMessage() {\n      return this.messageList[this.messageList.length - 1];\n    },\n    onMessageWasSent (message) {\n      if (!this.everTouched) {\n        this.everTouched = true;\n      }\n      if (this.touchWords.some(word => message.data.text.toLowerCase().includes(word))) {\n        this.toLead = true;\n      }\n\n      const lastMessage = this.getLasMessage();\n      if (lastMessage.options && lastMessage.options.generic_followup) {\n        if (this.positiveWords.some(word => message.data.text.toLowerCase() == word)) {\n          this.addNewMessage(message);\n          return;\n        }\n        if (this.negativeWords.some(word => message.data.text.toLowerCase() == word)) {\n          this.addNewMessage(message);\n          this.addNewMessage({\n            type: 'text',\n            author: 'bot',\n            data: {\n              text: `Thank you, I'm here if you need additional assistance`,\n            },\n          }, false);\n          return;\n        }\n      }\n\n      // called when the user sends a message\n      this.addNewMessage(message);\n      \n      if (lastMessage.prefill_id) {\n        this.prefills.find(prefill => prefill.id == lastMessage.prefill_id).filled = true;\n        this.checkPrefills();\n        return;\n      }\n      if (message.author == 'me') {\n        this.requireReply(message)\n      }\n    },\n    openChat () {\n      // called when the user clicks on the fab button to open the chat\n      this.isChatOpen = true\n      this.newMessagesCount = 0\n    },\n    closeChat () {\n      // called when the user clicks on the botton to close the chat\n      this.isChatOpen = false\n    },\n    sendLog() {\n      if (!this.log.ip) return\n      this.log.exit_at = new Date()\n      navigator.sendBeacon(`${this.$http.options.root}/chatbot/log`, new Blob([JSON.stringify({\n        ip: this.log.ip,\n        title: document.title,\n        url: location.href,\n        enter_at: this.log.enter_at,\n        exit_at: this.log.exit_at,\n        messages: this.messageList.map(message => ({\n          author: message.author,\n          text: message.data.text,\n        })),\n        toLead: this.toLead,\n      })], {type: 'text/plain; charset=UTF-8'}))\n      this.log.sent = true\n    },\n    handleSendLog() {\n      this.everTouched && !this.log.sent && this.sendLog()\n    },\n  },\n  filters: {\n    conversion: function (value, status, message) {\n      if (!value) return ''\n      if (!message.need_conversion) return value\n      if (!status.conversion || !status.conversion.from) return value\n\n      value = value.toString().replaceAll(status.conversion.from, status.conversion.to);\n\n      var from = new RegExp(status.conversion.from, 'g')\n      return value.replace(from, status.conversion.to);\n    }\n  },\n  mounted() {\n    fetch('https://api.ipify.org?format=json').then(response => response.json()).then(data => {\n      this.log.ip = data.ip\n    })\n    window.addEventListener('unload', this.handleSendLog)\n    window.addEventListener('beforeunload', this.handleSendLog)\n    this.$http.get('chatbot/status')\n      .then((response) => response.body)\n      .then((data) => {\n        this.status = data;\n      });\n  },\n}\n</script>\n<style lang=\"scss\">\n.sc-launcher {\n  z-index: 9999;\n}\n.sc-chat-window {\n  z-index: 9999;\n}\n.sc-suggestions-row {\n  margin-bottom: 6px;\n}\n.chat-bot-wrapper {\n  .sc-message-list {\n    padding-bottom: 10px;\n  }\n}\n</style>","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChatBot.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChatBot.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ChatBot.vue?vue&type=template&id=276a6ab4&\"\nimport script from \"./ChatBot.vue?vue&type=script&lang=js&\"\nexport * from \"./ChatBot.vue?vue&type=script&lang=js&\"\nimport style0 from \"./ChatBot.vue?vue&type=style&index=0&id=276a6ab4&prod&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Vue from 'vue'\n\nimport Chat from 'vue-beautiful-chat'\nVue.use(Chat)\n\nVue.config.productionTip = false\n\nimport VueResource from 'vue-resource'\nVue.use(VueResource)\n\nconst API_BASE_URL = process.env.NODE_ENV == 'production' ? 'https://iq.sixaxisllc.com' : 'http://127.0.0.1:9001' // 'https://api-sixaxis.ngrok.io'\n// const API_BASE_URL = 'http://127.0.0.1:9001' // 'https://api-sixaxis.ngrok.io'\nVue.http.options.root = API_BASE_URL\n\nimport ChatBot from './components/ChatBot';\n\nif (document.getElementById('chatbot-widget')) {\n  new Vue({\n    render: h => h(ChatBot)\n  }).$mount('#chatbot-widget')\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkvue_ui\"] = self[\"webpackChunkvue_ui\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [998], function() { return __webpack_require__(6248); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["render","_vm","this","_c","_self","staticClass","attrs","participants","onMessageWasSent","messageList","newMessagesCount","isChatOpen","closeChat","openChat","showTypingIndicator","colors","scopedSlots","_u","key","fn","message","_v","_s","_f","data","text","status","staticRenderFns","log","ip","sent","enter_at","Date","exit_at","prefillTimerID","prefills","id","type","filled","label","everTouched","toLead","touchWords","positiveWords","negativeWords","promptTimeout","name","author","header","bg","launcher","sentMessage","receivedMessage","userInput","userList","methods","checkPrefills","prefill","find","addNewMessage","prefill_id","suggestions","options","generic_followup","handlePreFills","check_prefill","clearTimeout","setTimeout","receiveMessage","question","length","need_conversion","startsWith","toLowerCase","includes","requireReply","$http","post","then","response","answer","catch","e","console","finally","getLasMessage","some","word","lastMessage","sendLog","navigator","sendBeacon","root","Blob","JSON","stringify","title","document","url","location","href","messages","map","handleSendLog","filters","conversion","value","from","toString","replaceAll","to","RegExp","replace","mounted","fetch","json","window","addEventListener","get","body","component","Vue","Chat","VueResource","API_BASE_URL","getElementById","h","ChatBot","$mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","m","deferred","O","result","chunkIds","priority","notFulfilled","Infinity","i","fulfilled","j","Object","keys","every","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","g","globalThis","Function","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","self","forEach","bind","push","__webpack_exports__"],"sourceRoot":""}